package com.gultekinahmetabdullah.trainvoc.database

import androidx.room.Dao
import androidx.room.Insert
import androidx.room.OnConflictStrategy
import androidx.room.Query
import com.gultekinahmetabdullah.trainvoc.classes.Word
import kotlinx.coroutines.flow.Flow

@Dao
interface WordDao {

    /**
     * Reset the progress of the user.
     *
     * Update the statistics of the words in the database.
     */
    @Query("UPDATE words SET correctCount = 0, wrongCount = 0, skippedCount = 0, timeSpentMs = 0, lastAnswered = 0")
    suspend fun resetProgress()

    /**
     * Word queries
     *
     * These queries are used to interact with the words in the database.
     *
     * The words are stored in the database and can be retrieved, inserted, and updated.
     *
     * The words are used to generate questions for the quiz.
     *
     */

    @Query("SELECT * FROM words WHERE word = :word")
    suspend fun getWord(word: String): Word

    @Query("SELECT * FROM words ORDER BY word ASC")
    fun getAllWords(): Flow<List<Word>>

    @Insert(onConflict = OnConflictStrategy.REPLACE)
    suspend fun insertWord(word: Word)

    @Insert
    suspend fun insertWords(words: List<Word>)

    /**
     * Statistics queries
     *
     * These queries are used to get the statistics of the user.
     *
     * The statistics are used to show the user's progress and performance.
     *
     */

    @Query("SELECT SUM(correctCount) FROM words")
    suspend fun getCorrectAnswers(): Int

    @Query("SELECT SUM(wrongCount) FROM words")
    suspend fun getWrongAnswers(): Int

    @Query("SELECT SUM(skippedCount) FROM words")
    suspend fun getSkippedAnswers(): Int

    /**
     * Update the statistics of a word in the database.
     *
     * The correct and wrong answers are updated based on the user's input.
     *
     * The word is then updated in the database.
     *
     * @param word The word to be updated.
     */

    @Query("UPDATE words SET correctCount = :correctAnswers, wrongCount = :wrongAnswers WHERE word = :word")
    suspend fun updateWordStats(word: String, correctAnswers: Int, wrongAnswers: Int)

    @Query("UPDATE words SET correctCount = correctCount + 1 WHERE word = :word")
    suspend fun increaseCorrectAnswers(word: String)

    @Query("UPDATE words SET wrongCount = wrongCount + 1 WHERE word = :word")
    suspend fun increaseWrongAnswers(word: String)

    @Query("UPDATE words SET skippedCount = skippedCount + 1 WHERE word = :word")
    suspend fun increaseSkippedAnswers(word: String)

    // Update the last time the word was answered
    @Query("UPDATE words SET lastAnswered = :time WHERE word = :word")
    suspend fun updateLastAnswered(word: String, time: Long = System.currentTimeMillis())

    // Add the time spent on the word
    @Query("UPDATE words SET timeSpentMs = timeSpentMs + :time WHERE word = :word")
    suspend fun addTimeSpent(word: String, time: Int)

    /**
     * Get a random list of words from the database.
     *
     * The list of words is shuffled and returned.
     *
     * @return A list of random words.
     */

    @Query("SELECT * FROM words ORDER BY RANDOM() LIMIT 5")
    suspend fun getRandomFiveWords(): List<Word>

    /**
     * Question queries
     *
     * These queries are used to generate questions for the quiz.
     *
     * The questions are generated by selecting a random word from the database and shuffling the other words.
     *
     * The correct word is then added to the list of incorrect words and shuffled.
     *
     * The question is then created with the correct word and the shuffled list of incorrect words.
     *
     * The question is then added to the list of questions.
     *
     * The list of questions is then returned.
     *
     * The list of questions is then used to populate the quiz screen.
     *
     * The user can then select an answer and the answer is checked against the correct word.
     *
     */

    // Order the words by the number of correct answers in ascending order and return random 5 words
    @Query("SELECT * FROM words ORDER BY correctCount ASC, RANDOM() LIMIT 5")
    suspend fun getLeastCorrectFiveWords(): List<Word>

    // Order the words by the number of correct answers in descending order and return random 5 words
    @Query("SELECT * FROM words ORDER BY correctCount DESC, RANDOM() LIMIT 5")
    suspend fun getMostCorrectFiveWords(): List<Word>

    // Order the words by the number of wrong answers in ascending order and return random 5 words
    @Query("SELECT * FROM words ORDER BY wrongCount ASC, RANDOM() LIMIT 5")
    suspend fun getLeastWrongFiveWords(): List<Word>

    // Order the words by the number of wrong answers in descending order and return random 5 words
    @Query("SELECT * FROM words ORDER BY wrongCount DESC, RANDOM() LIMIT 5")
    suspend fun getMostWrongFiveWords(): List<Word>

    // Order the words by the number of total answers in ascending order and return random 5 words
    @Query("SELECT * FROM words ORDER BY (correctCount + wrongCount) ASC, RANDOM() LIMIT 5")
    suspend fun getLeastReviewedFiveWords(): List<Word>

    // Order the words by the number of total answers in descending order and return random 5 words
    @Query("SELECT * FROM words ORDER BY (correctCount + wrongCount) DESC, RANDOM() LIMIT 5")
    suspend fun getMostReviewedFiveWords(): List<Word>

    // Order the words by the last time they were answered in ascending order and return random 5 words
    @Query("SELECT * FROM words ORDER BY lastAnswered ASC, RANDOM() LIMIT 5")
    suspend fun getLeastRecentFiveWords(): List<Word>

    // Order the words by the last time they were answered in descending order and return random 5 words
    @Query("SELECT * FROM words ORDER BY lastAnswered DESC, RANDOM() LIMIT 5")
    suspend fun getMostRecentFiveWords(): List<Word>

    // Get the total time spent on the words
    @Query("SELECT SUM(timeSpentMs) FROM words")
    suspend fun getTotalTimeSpent(): Int

    // Get the time spent on a specific word
    @Query("SELECT timeSpentMs FROM words WHERE word = :word")
    suspend fun getTimeSpent(word: String): Int

    // Get the last time the word was answered
    @Query("SELECT lastAnswered FROM words WHERE word = :word")
    suspend fun getLastAnswered(word: String): Long

    // Get the last time any word was answered
    @Query("SELECT lastAnswered FROM words ORDER BY lastAnswered DESC LIMIT 1")
    suspend fun getLastAnswered(): Long
}